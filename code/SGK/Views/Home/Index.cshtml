@{
    ViewBag.Title = "首页";
    var F = @Html.F();
}

@section head {

    <link type="text/css" rel="stylesheet" href="~/res/css/index.css" />
    <script>
        function Exit(){
            window.location.href='@Url.Action("Exit")';
        }
    </script>
}

@section body {

    <div id="header" class="ui-widget-header f-mainheader">
        <table>
            <tr>
                <td>
                    @(F.Button()
                        .EnableDefaultCorner(false)
                        .EnableDefaultState(false)
                        .IconFont(IconFont.Home)
                        .IconAlign(IconAlign.Top)
                        .ToolTip("首页")
                        .ID("btnHomePage")
                        .CssClass("icononlyaction")
                    )
                    <a class="logo" href="@Url.Content("~/")" title="宿舍管理系统">
                        宿舍管理系统
                    </a>
                </td>
                <td style="text-align: right;">
                    @*
                        @(F.Button()
                            .EnableDefaultCorner(false)
                            .EnableDefaultState(false)
                            .IconFont(IconFont.Bank)
                            .IconAlign(IconAlign.Top)
                            .Text("主题仓库")
                            .ID("btnThemeSelect")
                            .CssClass("icontopaction themes")
                            .Listener("click", "onThemeSelectClick")
                        )
                    *@
                    @(F.Button()
                        .EnableDefaultCorner(false)
                        .EnableDefaultState(false)
                        .Text(ViewBag.AccountName)
                        .CssClass("userpicaction")
                        .Menu(F.Menu()
                            .Items(
                                F.MenuButton()
                                    .IconFont(IconFont.SignOut)
                                    .Text("安全退出")
                                    .Listener("click", "Exit();")
                            )
                        )
                    )
                </td>
            </tr>
        </table>
    </div>

    <div id="maincontent">
        <h2>FineUIMvc</h2>

    </div>

    @(F.RegionPanel()
        .ID("RegionPanel1")
        .ShowBorder(false)
        .IsViewPort(true)
        .CssClass("mainpanel")
        .Regions(
            F.Region()
                .ID("Region1")
                .ShowBorder(false)
                .ShowHeader(false)
                .RegionPosition(Position.Top)
                .CssClass("topregion bgpanel")
                .Layout(LayoutType.Fit)
                .ContentEl("#header"),
            F.Region()
                .ID("Region2")
                .RegionSplit(true)
                .RegionSplitWidth(2)
                .RegionSplitIcon(false)
                .Width(200)
                .ShowHeader(false)
                .Title("菜单")
                .EnableCollapse(true)
                .Layout(LayoutType.Fit)
                .RegionPosition(Position.Left)
                .CssClass("leftregion bgpanel")
                .Items(
                    F.Tree()
                        .ShowBorder(false)
                        .ShowHeader(false)
                        .ID("treeMenu")
                        .Nodes(
                        //F.TreeNode()
                        //    .Text("基础数据管理")
                        //    .Expanded(false)
                        //    .Nodes(
                        //        F.TreeNode()
                        //            .Text("单位管理")
                        //            .NavigateUrl(Url.Content("~/JC/Dept/Index")),
                        //        F.TreeNode()
                        //            .Text("学生信息管理")
                        //            .NavigateUrl(Url.Content("~/JC/Student/Index")),
                        //        F.TreeNode()
                        //            .Text("宿舍管理")
                        //            .NavigateUrl(Url.Content("~/JC/Dorm/Index"))
                        //    ),
                        //F.TreeNode()
                        //    .Text("申请管理")
                        //    .NavigateUrl(Url.Content("~/TB/Report/Index")),
                        //F.TreeNode()
                        //    .Text("审核管理"),
                        //F.TreeNode()
                        //    .Text("报表管理")
                        //    .Expanded(false)
                        //    .Nodes(
                        //        F.TreeNode()
                        //            .Text("变动记录")
                        //            .NavigateUrl(""),
                        //        F.TreeNode()
                        //            .Text("学生住宿情况")
                        //            .NavigateUrl(""),
                        //        F.TreeNode()
                        //            .Text("宿舍住宿情况")
                        //            .NavigateUrl(Url.Content("~/CX/Dorm/Index"))
                        //    ),
                        //F.TreeNode()
                        //    .Text("基本信息管理")
                        //    .Expanded(false)
                        //    .Nodes(
                        //        F.TreeNode()
                        //            .Text("密码修改")
                        //            .NavigateUrl(Url.Content("~/UserInfo/Psd/Index"))
                        //    ),
                        //F.TreeNode()
                        //    .Text("系统管理")
                        //    .Expanded(false)
                        //    .Nodes(
                        //        F.TreeNode()
                        //            .Text("用户管理")
                        //            .NavigateUrl(Url.Content("~/Sys/Account/Index")),
                        //        F.TreeNode()
                        //            .Text("菜单管理")
                        //            .NavigateUrl(Url.Content("~/Sys/Menu/Index")),
                        //        F.TreeNode()
                        //            .Text("角色管理")
                        //            .NavigateUrl(Url.Content("~/Sys/Role/Index")),
                        //        F.TreeNode()
                        //            .Text("角色菜单管理")
                        //            .NavigateUrl("")
                        //    )
                        (TreeNode[])ViewBag.treeMenu
                        )
                ),
            F.Region()
                .ID("mainRegion")
                .ShowHeader(false)
                .Layout(LayoutType.Fit)
                .RegionPosition(Position.Center)
                .CssClass("centerregion")
                .Items(
                    F.TabStrip()
                        .ID("mainTabStrip")
                        .EnableTabCloseMenu(true)
                        .ShowBorder(false)
                        .Tabs(
                            F.Tab()
                                .ID("Tab1")
                                .Title("首页")
                                .BodyPadding(10)
                                .Layout(LayoutType.Fit)
                                .Icon(Icon.House)
                                .ContentEl("#maincontent")
                        )
                )
        )
    )


    @(F.Window()
        .Hidden(true)
        .EnableResize(true)
        .EnableMaximize(true)
        .EnableClose(true)
        .Height(600)
        .Width(1020)
        .IsModal(true)
        .ClearIFrameAfterClose(false)
        .IFrameUrl(Url.Content("~/Home/Themes"))
        .EnableIFrame(true)
        .Title("主题仓库")
        .ID("windowThemeRoller")
    )
}

@section script {

    <script>

        // 点击主题仓库
        function onThemeSelectClick(event) {
            F.ui.windowThemeRoller.show();
        }

        // 页面控件初始化完毕后，会调用用户自定义的onReady函数
        F.ready(function () {

            // 初始化主框架中的树和选项卡互动，以及地址栏的更新
            // treeMenu： 主框架中的树控件实例，或者内嵌树控件的手风琴控件实例
            // mainTabStrip： 选项卡实例
            // updateHash: 切换Tab时，是否更新地址栏Hash值（默认值：true）
            // refreshWhenExist： 添加选项卡时，如果选项卡已经存在，是否刷新内部IFrame（默认值：false）
            // refreshWhenTabChange: 切换选项卡时，是否刷新内部IFrame（默认值：false）
            // maxTabCount: 最大允许打开的选项卡数量
            // maxTabMessage: 超过最大允许打开选项卡数量时的提示信息
            F.initTreeTabStrip(F.ui.treeMenu, F.ui.mainTabStrip, {
                maxTabCount: 10,
                maxTabMessage: '请先关闭一些选项卡（最多允许打开 10 个）！'
            });

        });
    </script>
}
